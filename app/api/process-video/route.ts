import connectToDatabase from '@/lib/db/mongo/db'
import { getGeminiData } from '@/lib/gemini'
import { VideoModel, VideoNotesModel } from '@/modal/schema'
import { auth } from '@clerk/nextjs/server'
import { NextResponse } from 'next/server'
import { YoutubeTranscript } from 'youtube-transcript'


// interface GeminiDataTypes {
//   revisionNotes: string;
//   flashCard: { id: number; front: string; back: string }[];
//   quiz: { question: string; options: { text: string }[]; correctOption: number }[];
//   projectList: {
//     category: string;
//     title: string;
//     description: string;
//     steps: { context: string; description: string }[];
//   }[];
//   story: {
//     title: string;
//     paragraphs: { text: string; prompt: string }[];
//   };
// }


export async function POST (req: Request) {
  const { userId } = await auth()
  const { url } = await req.json()
  console.log('url-be:', url)
  await connectToDatabase()

  try {
    // const parser = new XMLParser();
    console.log('URL!!: ' + url)

    //#1 : get the transcription of the yt video
    console.log('Generating Transcript...')
    const transcript = await YoutubeTranscript.fetchTranscript(url)
    const transcriptData = transcript.map(entry => entry.text).join(' ')

    if (!transcriptData || transcriptData === '') {
      return NextResponse.json(
        { message: 'Transcription Failed.' },
        { status: 400 }
      )
    }

    console.log('Storing transcript in db...')
    //#1.1: make a db entry over this yt video and data
    const videoData = await VideoModel.create({
      url: url,
      transcript: transcriptData,
      userId: userId
    })
    console.log('VideoData id:', videoData._id)

    //#2: hit the gemini and get all the details of the cards and functions
    console.log('Generating content...')
    const geminiData = await getGeminiData(transcriptData)
    // console.log("geminiData:", geminiData)

    //2.1: store the gemini generated text in db:
    // console.log('parsing the flashcard...')
    // const flashcards = parseFlashcardsFromString(geminiData?.flashCard!)
    // console.log('parsed flashcard:', flashcards)

    console.log('Storing Notesdata generated by gemini the data in db...')
    const NotesData = await VideoNotesModel.create({
      userId: userId,
      videoId: videoData._id,
      revisedNotes: geminiData?.revisionNotes,
      flashcards: geminiData?.flashCard,
      quizzes: geminiData?.quiz,
      projectList: geminiData?.projectList,
      storytelling: geminiData?.story
    })

    // console.log("transcriptData:", transcriptData)
    return NextResponse.json({ notesDataId: NotesData._id }, { status: 200 })
    // return NextResponse.json({ "msg": "asdf" }, { status: 200 })
    
  } catch (e) {
    console.log('Exception happened:\n')
    console.log(e)
    return NextResponse.json(
      {
        msg: 'Error: cant get the transcript, ' + e
      },
      { status: 500 }
    )
  }
}

// function parseFlashcards (flashcardString: string) {
//   try {
//     // const flashcardPattern =
//     // /\*\*Flashcard (\d+)\*\*\n\n\* \*\*Front:\*\* (.+?)\n\* \*\*Back:\*\* (.+?)\n/g

//     const flashcardPattern =
//       /Flashcard (\d+):\s*Front: (.+?)\s*Back: (.+?)(?=\nFlashcard|\n?$)/

//     const flashcards = []

//     let match
//     while ((match = flashcardPattern.exec(flashcardString)) !== null) {
//       const id = parseInt(match[1], 10)
//       const front = match[2].trim()
//       const back = match[3].trim()

//       flashcards.push({ id, front, back })
//     }

//     console.log('parsedFlashCarf for the parseflashcard:', flashcards)

//     return flashcards
//   } catch (error) {
//     console.error('failed to parse the flashcard')
//   }
// }


function parseFlashcardsFromString(flashcardData: string): { id: number; front: string; back: string }[] {
  const flashcardPattern = /Flashcard (\d+):\s*Front: (.+?)\s*Back: (.+?)(?=\nFlashcard|\n?$)/gs
  const flashcards = []

  let match
  while ((match = flashcardPattern.exec(flashcardData)) !== null) {
    const id = parseInt(match[1], 10)
    const front = match[2].trim()
    const back = match[3].trim()

    flashcards.push({ id, front, back })
  }

  return flashcards
}